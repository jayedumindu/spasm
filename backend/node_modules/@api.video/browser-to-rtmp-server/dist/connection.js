"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const ffmpeg_1 = __importStar(require("./ffmpeg"));
class Connection extends events_1.EventEmitter {
    constructor(logger, socket, uuid, onStartHook) {
        super();
        this.socket = socket;
        this.logger = logger;
        this.uuid = uuid;
        this.onStartHook = onStartHook;
        this.socket.on('start', (event, callback) => this.onStart(event, callback));
        this.socket.on('stop', (callback) => this.onStop(callback));
        this.socket.on('error', (event) => this.onSocketError(event));
        this.socket.on('binarystream', (data, callback) => this.onBinaryStream(data, callback));
    }
    destroy() {
        this.logger.info('destroying ffmpeg instance');
        this.ffmpeg?.destroy();
    }
    getStatus() {
        return {
            ffmpeg: this.ffmpeg?.getStatus(),
            uuid: this.uuid,
            remoteAddress: this.socket.handshake.address
        };
    }
    onSocketError(error) {
        this.logger.warn('socket error', error);
    }
    onStop(callback) {
        this.destroy();
        if (callback)
            callback();
    }
    ;
    onStart(event, callback) {
        if (this.onStartHook) {
            try {
                event = this.onStartHook(this.socket, event);
            }
            catch (e) {
                this.onFfmpegError({
                    message: e.message,
                    name: "CANT_START_FFMPEG",
                    fatal: true
                });
                return;
            }
        }
        if (!this.validateFfmpegConfig(event)) {
            return;
        }
        this.ffmpeg = new ffmpeg_1.default(this.logger, event);
        this.logger.info('starting new ffmpeg instance');
        this.ffmpeg.on("destroyed", () => this.ffmpeg = undefined);
        this.ffmpeg.on('ffmpegOutput', (e) => this.emit('ffmpegOutput', e));
        this.ffmpeg.on('error', (e) => this.onFfmpegError(e));
        this.ffmpeg.start();
        if (callback)
            callback();
    }
    onFfmpegError(error) {
        this.sendErrorToClient(error);
        this.logger.warn('ffmpeg error', error);
        if (error.fatal) {
            this.destroy();
        }
    }
    sendErrorToClient(error) {
        this.emit('error', error);
    }
    validateFfmpegConfig(config) {
        const errors = [];
        ["framerate", "audioSampleRate", "rtmp"].forEach(p => {
            if (!config[p]) {
                errors.push(`${p}`);
            }
        });
        if (errors.length > 0) {
            this.sendErrorToClient({
                name: "INVALID_PARAMETERS",
                message: "Missing values: " + errors.join(", "),
                fatal: true
            });
        }
        return errors.length === 0;
    }
    onBinaryStream(data, callback) {
        if (!this.ffmpeg) {
            callback(ffmpeg_1.FfmpegErrors.FFMPEG_NOT_RUNNING);
            this.emit("error", ffmpeg_1.FfmpegErrors.FFMPEG_NOT_RUNNING);
            return;
        }
        this.ffmpeg?.sendData(data)
            .then(() => callback())
            .catch((err) => {
            this.emit("error", err);
            callback(err);
        });
    }
}
exports.default = Connection;
Connection.count = 0;
//# sourceMappingURL=connection.js.map